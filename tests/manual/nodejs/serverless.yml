service: basic

configValidationMode: error

plugins:
  - serverless-offline

provider:
  apiKeys:
    - token
  name: aws
  runtime: nodejs16.x

functions:
  hello:
    events:
      - http:
          method: get
          path: hello
      - http:
          method: post
          path: hello
    handler: src/handler.hello

  rejectedPromise:
    events:
      - http:
          method: any
          path: rejectedPromise
    handler: src/handler.rejectedPromise

  helloAuthorizerWithArn:
    events:
      - http:
          authorizer:
            arn: sometest
          method: get
          path: helloAuthorizerWithArn
    handler: src/handler.hello

  helloAuthorizerWithAuthorizerId:
    events:
      - http:
          authorizer:
            authorizerId: commonAuthorizerId
            type: CUSTOM
          method: get
          path: helloAuthorizerWithAuthorizerId
    handler: src/handler.hello

  helloAuthorizerWithFunctionName:
    events:
      - http:
          authorizer:
            identitySource: method.request.header.Authorization #Required for serverless-offline, although it's a default
            name: authFunction
            resultTtlInSeconds: 0 #prevents caching the authorizer
          method: get
          path: helloAuthorizerWithCustomFunction
    handler: src/handler.hello

  authFunction:
    handler: src/handler.authFunction

  hello500:
    events:
      - http:
          method: get
          path: hello500
      - http:
          method: post
          path: hello500
    handler: src/handler.hello500

  helloLambdaIntegration:
    events:
      - http:
          integration: lambda
          method: get
          path: helloLambdaIntegration
      - http:
          integration: lambda
          method: post
          path: helloLambdaIntegration
    handler: src/handler.helloLambdaIntegration

  helloLambdaIntegration500:
    events:
      - http:
          integration: lambda
          method: get
          path: helloLambdaIntegration500
      - http:
          integration: lambda
          method: post
          path: helloLambdaIntegration500
    handler: src/handler.helloLambdaIntegration500

  basicAuthentication:
    events:
      - http:
          method: GET
          path: fn2
          private: true
    handler: src/handler.basicAuthentication

  samePathPublicGet:
    events:
      - http:
          method: GET
          path: fn3
    handler: src/handler.hello

  samePathPrivatePost:
    events:
      - http:
          method: POST
          path: fn3
          private: true
    handler: src/handler.basicAuthentication

  pathParams:
    events:
      - http:
          method: GET
          path: /pathParams/{id}
    handler: src/handler.pathParams

  failure:
    events:
      - http:
          method: GET
          path: /failure
    handler: src/handler.failure

  catchAll:
    events:
      - http:
          method: ANY
          path: /{proxy+}
    handler: src/handler.catchAll

resources:
  Resources:
    EchoProxyResource:
      Properties:
        PathPart: echo/{proxy+}
      Type: AWS::ApiGateway::Resource
    EchoProxyMethod:
      Properties:
        HttpMethod: ANY
        Integration:
          IntegrationHttpMethod: ANY
          Type: HTTP_PROXY
          Uri: http://mockbin.org/request/{proxy}
        ResourceId:
          Ref: EchoProxyResource
      Type: AWS::ApiGateway::Method
